
  int chdir_return_value = -1;

  /*
    printf("You must implement me :)\n");
    print_tree(t); */

	
  /* exit/hastalavista command 
     if ((strcmp(t->argv[0], "exit") == 0) || (strcmp(t->argv[0], "hastalavista") == 0)) {
 
     printf("See you\n");
     exit(EXIT_SUCCESS);
		
      
     } else if (strcmp(t->argv[0], "cd") == 0) {

     chdir_return_value = chdir(t->argv[1]);
     
     if (chdir_return_value == -1) {
	
     printf("Cannot change to directory %s\n", t->argv[1]);

     }
     
     } else*/ if (t != NULL) {
    
    print_tree(t->left);

    if (t->conjunction == NONE) {
      /*         printf("NONE: %s, %s", t->argv[0], t->argv[1]);*/


      if ((strcmp(t->argv[0], "exit") == 0) || (strcmp(t->argv[0], "hastalavista") == 0)) {
 
/*	printf("See you\n");*/
	exit(EXIT_SUCCESS);
		
      
      } else if (strcmp(t->argv[0], "cd") == 0) {

	chdir_return_value = chdir(t->argv[1]);
     
	if (chdir_return_value == -1) {
	
	  perror(t->argv[1]);

	}
     
      } else {
	pid_t child_pid;
	int exe_return_value = -1;
	if ((child_pid = fork()) < 0) {

	  perror("fork");

	} else if (child_pid) {

	  wait(NULL);

	} else {

	  /* use execvp to execute the UNIX command input by the user */
	  exe_return_value = execvp(t->argv[0], t->argv);
	  /* print error message if the command is invalid */
	  if (exe_return_value == -1) {

	    printf("Failed to execute %s\n", t->argv[0]);
	    fflush(stdout);
	    exit(EX_OSERR);

	  }

	  fflush(stdout);
	  exit(EXIT_SUCCESS);

	}
      }

    } else {
      printf("%s, ", conj[t->conjunction]);
/*	
	int fd[2], child1_pid, child2_pid;
	if (pipe(fd) < 0) {

		perror("pipe");

	} 
	
	if ((child1_pid = fork()) < 0) {

		perror("fork");

	} 
  	
	if (child1_pid == 0) {

		close(fd[0]);
		dup2(fd[1], STDOUT_FINLENO);
		close(fd[1]]);
		execvp(argv[0], argv);

	}
 
	if ((child2_pid = fork()) < 0)  {

		perror("fork");

	} 

	if (child2_pid == 0) {

		close(fd[1]);
		dup2(fd[0], STDIN_FINLENO);
		close(fd[0]]);
		execvp(argv[0], argv);

	}
	
 	waitpid(child1_pid, NULL, 0);
	waitpid(child2_pid, NULL, 0);
*/
      /*	printf("\nt->argv[0]: %s\n", t->argv[0]);*/

    }
    printf("IR: %s, ", t->input);
    printf("OR: %s\n", t->output);

    print_tree(t->right);
      
  }
 
  return 0;

